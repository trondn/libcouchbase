'\" t
.\"     Title: lcb_evict
.\"    Author: Trond Norbye <trond.norbye@couchbase.com>
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "LCB_EVICT" "3" "10/25/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
lcb_evict \- Force an eviction of a document from the in\-memory database cache
.SH "SYNOPSIS"
.sp
cc [ flag \&... ] file\&... \-lcouchbase [ library \&... ]
.sp
.nf
#include <libcouchbase/couchbase\&.h>
.fi
.sp
.nf
lcb_error_t lcb_evict(lcb_t instance,
                      const void *command_cookie,
                      lcb_size_t num,
                      const lcb_evict_cmd_t *const *commands);
.fi
.SH "DESCRIPTION"
.sp
lcb_evict() is used to force the eviction of a document from the clusters memory (which would force the cluster to page the item back in from persistent storage if anyone tries to access it again)\&. If the library instance is using asynchronous mode (the default) this operation will return immediately and schedule the operations to be executed by the event loop, otherwise it will block until all commands are executed\&. command_cookie is is an opaque field that will be provided to the callback function\&. num is the number of entries in the commands array\&.
.sp
lcb_evict_cmd_t is a structure defined in <libcouchbase/arguments\&.h>:
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    int version;              /* The entry in "v" to use */
    union {
        struct {
            const void *key;    /* The key this response belongs to */
            lcb_size_t nkey;    /* The number of bytes in the key */
            lcb_cas_t cas;      /* To specify the version to evict */
            const void *hashkey; /* hash key if != key */
            lcb_size_t nhashkey; /* number of bytes in hash key */
        } v0;
    } v;
} lcb_get_cmd_t;
.fi
.if n \{\
.RE
.\}
.sp
key and nkey is used to specify the key to evict from the server\&. To specify a given version of the key the cas value for the key may be specified to a non\-null value\&. hashkey and nhashkey may be used to determine which server the key is supposed to be located\&.
.sp
Upon completion the evict callback as set by lcb_set_evict_callback is called\&.
.SH "RETURN VALUES"
.sp
lcb_evict() returns the LCB_SUCCESS on success, or a specific error code upon failure\&. See lcb_strerror(3) for more information\&.
.sp
The normal codes which could be passed to the evict callback are:
.TS
allbox tab(:);
lt lt
lt lt
lt lt.
T{
.sp
LCB_SUCCESS
T}:T{
.sp
The operation completed successfully and the key was evicted from memory
T}
T{
.sp
LCB_KEY_EEXISTS
T}:T{
.sp
The key cannot be ejected, because the object is dirty or too small
T}
T{
.sp
LCB_KEY_ENOENT
T}:T{
.sp
The given key cannot be found in the database
T}
.TE
.sp 1
.SH "EXAMPLES"
.sp
.if n \{\
.RS 4
.\}
.nf
#include <libcouchbase/couchbase\&.h>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.
lcb_t instance;
\&.\&.\&.
lcb_evict_cmd_t *evict = calloc(1, sizeof(*evict));
evict\->version = 0;
evict\->v\&.v0\&.key = "my\-key";
evict\->v\&.v0\&.nkey = strlen(evict\->v\&.v0\&.key);
lcb_evict_cmd_st* commands[] = { evict };
lcb_evict(instance, NULL, 1, commands);
\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.SH "ATTRIBUTES"
.sp
See lcb_attributes(5) for descriptions of the following attributes:
.TS
allbox tab(:);
ltB ltB.
T{
ATTRIBUTE TYPE
T}:T{
ATTRIBUTE VALUE
T}
.T&
lt lt
lt lt.
T{
.sp
Interface Stability
T}:T{
.sp
Evolving
T}
T{
.sp
MT\-Level
T}:T{
.sp
MT\-Safe
T}
.TE
.sp 1
.SH "COPYRIGHT"
.sp
Copyright 2013 Couchbase, Inc\&.
.SH "SEE ALSO"
.sp
Learn more at http://www\&.couchbase\&.com/communities/c\&.
.sp
libcouchbase(3), lcb_set_evict_callback(3), lcb_attributes(5)
.SH "AUTHOR"
.PP
\fBTrond Norbye\fR <\&trond\&.norbye@couchbase\&.com\&>
.RS 4
Author.
.RE
